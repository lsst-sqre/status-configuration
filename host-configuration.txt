1) AMI: Centos 7 (x86_64) HVM.  t2-medium, 25GB SSD.  Allow 80, 443, &
   22/TCP from anywhere.  Associate EIP.  Log in, become root.
   hostnamectl set-hostname status.lsst.codes (or set it in
   cloud-config).
2) Install EPEL: yum install -y epel-release && yum repolist
3) Update: yum -y update
4) Install Nagios: yum -y install nagios nagios-plugins-all
   (no, we don't really need all the plugins)
4a) Reset the nagiosadmin password with:
    cd /etc/nagios
    htpasswd -c /etc/nagios/htpasswd.users nagiosadmin
    rm passwd
    ln htpwasswd.users passwd
5) Start Nagios: chkconfig nagios on && service nagios start
5a) Install SSL for Apache: yum -y install mod_ssl
5b) Procure the certificates for /etc/httpd/ssl
5c) Edit /etc/httpd/conf.d/ssl.conf:
    1. Do forward secrecy:
       SSLHonorCipherOrder On
       SSLCipherSuite ECDH+AESGCM:ECDH+CHACHA20:DH+AESGCM:ECDH+AES256:\
       DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    2. Point to the certificate store you got in 4b.
6) Start Apache: chkconfig httpd on && service httpd start
7) Smoke test: hit <ip>/nagios, use nagiosadmin and the pw you set, make
   sure all is well
8) Install modules we'll need: yum -y install perl-LWP-Protocol-https \
    perl-HTTP-Request-AsCGI
8a) yum -y install git git-lfs wget emacs
9) Set up Nagios configuration:
mkdir -p /etc/nagios/conf.d
mv /etc/nagios/nagios.cfg /etc/nagios/nagios.cfg.$(date +%Y-%m-%d)
cd /etc
git clone https://github.com/lsst-sqre/status-configuration.git
mv /etc/nagios/nagios.cfg /etc/nagios/nagios.cfg.$(date +%Y-%m-%d)
mv /etc/nagios/conf.d /etc/nagios/conf.d.$(date +%Y-%m-%d)
mv /etc/nagios/objects /etc/nagios/objects.$(date +%Y-%m-%d)
ln -s ../status-configuration/nagios/nagios.cfg /etc/nagios/nagios.cfg
ln -s ../status-configuration/nagios/conf.d /etc/nagios/conf.d
ln -s ../status-configuration/nagios/objects /etc/nagios/objects


# install sensu-plugins-http gem which provides check-http.rb
#
# The system ruby, 2.0.0, on el7 is EOL'd and sensu requires ruby >= 2.1

yum install -y centos-release-scl gcc-c++ make
yum install -y rh-ruby24-ruby-devel
scl enable rh-ruby24 -- gem install sensu-plugins-http
scl enable rh-ruby24 -- gem install sensu-plugins-ssl
# Activesupport >5 requires ruby >= 2.5
scl enable rh-ruby24 -- gem install activesupport:'< 6.0'
scl enable rh-ruby24 -- gem install sensu-plugins-dns

plugs=(
    # sensu-plugins-http
    check-head-redirect.rb
    check-http-json.rb
    check-https-cert.rb
    check-http-cors.rb
    check-http.rb
    check-last-modified.rb
    # Sensu-plugins-ssl
    check-java-keystore-cert.rb
    check-ssl-anchor.rb
    check-ssl-crl.rb
    check-ssl-cert.rb
    check-ssl-host.rb
    check-ssl-qualys.rb
    check-dns.rb
)

for cmd in "${plugs[@]}"; do
    cat > "/usr/bin/${cmd}" <<END
scl enable rh-ruby24 -- $cmd \$@
END
    chmod 555 "/usr/bin/${cmd}"
done

# check_gitlfs
cd /usr/local/bin
wget https://raw.githubusercontent.com/lsst-sqre/check-gitlfs/master/check_gitlfs
chmod 755 check_gitlfs

9b) add status.lsst.codes to the end of the ::1 /etc/hosts line to shut
   up nagios about ipv6 pings.
10) Edit /etc/nagios/private/resource.cfg
   uncomment $USER2$
   $USER3$ is the Github monitoring user: in our case, "sqrbot"
   $USER4$ is the Github monitoring user's personal token
   $USER5$ is, sigh, the Github monitoring user's password
11) Install Nagios Slack integration:
   Do the stuff at:
     https://lsstc.slack.com/services/B33GGV5AP?
   Do not do the slack_nagios.cfg bit--it's already in the git config.
12) Install livestatus:
   yum install -y check-mk-livestatus
13) Install pip:
   yum install -y python-pip
14) Install Bitly Proxy Python module:
   pip install bitly-oauth2-proxy-session
15) Copy check_bitly_proxy_https to /usr/local/bin:
   cp /etc/status-configuration/python/check_bitly_proxy_https /usr/local/bin
16) Don't do this; it's already in the configuration files.
    /* Add livestatus to Nagios cfg:
    broker_module=/usr/lib64/check_mk/livestatus.o \
     /var/spool/nagios/cmd/nagios.live
    */ 
17) Create selinux config to allow apache/nagios to use the socket and
     the new plugin:
    cd /etc/status-configuration/selinux
    checkmodule -M -m -o nagiosstatus.mod nagiosstatus.te
    semodule_package -o nagiosstatus.pp -m nagiosstatus.mod
    checkmodule -M -m -o nagiosplugin.mod nagiosplugin.te
    semodule_package -o nagiosplugin.pp -m nagiosplugin.mod
    semodule -i nagiosstatus.pp
    semodule -i nagiosplugin.pp
18) Create route53 CNAME
19) create Apache status config and site config:
     cp /etc/status-configuration/httpd/* /etc/httpd/conf.d
20) create CGI (yeah, I gave up on WSGI)
     mkdir -p /usr/local/lib/cgi
     cp /etc/status-configuration/cgi/* /usr/local/lib/cgi
     chmod 0755 /usr/local/lib/cgi/nagios_api.cgi
21) restart httpd: service httpd restart
22) Install docker
# centos 7 extras packaged docker creates a `docker` group but
# /var/run/docker.sock with an ownership of root:root
# it is just as easy to use docker-ce instead of scripting around the problem.
# see: https://docs.docker.com/install/linux/docker-ce/centos/
yum remove docker \
    docker-client \
    docker-client-latest \
    docker-common \
    docker-latest \
    docker-latest-logrotate \
    docker-logrotate \
    docker-engine

yum install -y yum-utils \
    device-mapper-persistent-data \
    lvm2

yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

yum install -y docker-ce

usermod -aG docker nagios
systemctl enable docker
systemctl start docker

# sanity check
chsh -s /bin/bash nagios
sudo -iu nagios docker run -ti alpine

# selinux docker under nagios errors

# install known working mod
cat >nagios_docker.te <<END

module nagios_docker 1.0;

require {
	type nagios_t;
	type container_runtime_exec_t;
	type nagios_tmp_t;
	type nagios_spool_t;
	type sysctl_net_t;
	type container_runtime_t;
	class unix_stream_socket connectto;
	class lnk_file create;
	class dir { create search };
	class file { execute execute_no_trans open read };
}

#============= nagios_t ==============

#!!!! This avc is allowed in the current policy
allow nagios_t container_runtime_exec_t:file { execute execute_no_trans open read };

#!!!! This avc is allowed in the current policy
allow nagios_t container_runtime_t:unix_stream_socket connectto;

#!!!! This avc is allowed in the current policy
allow nagios_t nagios_spool_t:dir create;

#!!!! This avc is allowed in the current policy
allow nagios_t nagios_tmp_t:file { execute execute_no_trans };

#!!!! This avc is allowed in the current policy
allow nagios_t nagios_tmp_t:lnk_file create;

#!!!! This avc is allowed in the current policy
allow nagios_t sysctl_net_t:dir search;
allow nagios_t sysctl_net_t:file open;

#!!!! This avc is allowed in the current policy
allow nagios_t sysctl_net_t:file read;
END
checkmodule -M -m -o nagios_docker.mod nagios_docker.te
semodule_package -o nagios_docker.pp -m nagios_docker.mod
semodule -i nagios_docker.pp

# sanity check
sudo -iu nagios docker run -ti alpine
# Reset nagios shell to nologin
chsh -s /sbin/nologin nagios

23) mkdir -p /var/log/nagios
    touch /var/log/nagios/nagios.log
    chown nagios.nagios /var/log/nagios/nagios.log
    service nagios restart

24) turn off unused services

sudo systemctl disable rpcbind.socket
sudo systemctl stop rpcbind.socket
sudo systemctl disable rpcbind
sudo systemctl stop rpcbind
sudo systemctl disable postfix
sudo systemctl stop postfix

25) stop chronyd from listening on port 323

sudo echo "cmdport 0" >> /etc/chrony.conf
sudo systemctl restart chronyd

26) nagios selinux shenanigans

# check-http.rb and check-dns.rb keep trying to use ports > 1024 but below the
# local port range (~32K).

cat >nagios_ports.te <<END
module nagios_ports 1.0;

require {
    type nagios_t;
    type unreserved_port_t;
    class udp_socket name_bind;
}

allow nagios_t unreserved_port_t:udp_socket name_bind;
END
checkmodule -M -m -o nagios_ports.mod nagios_ports.te
semodule_package -o nagios_ports.pp -m nagios_ports.mod
semodule -i nagios_ports.pp
